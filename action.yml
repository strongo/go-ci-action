name: 'Continious integration for Go modules'
description: 'Test pipeline for Go modules'
inputs:
  lint-timeout:  # id of input
    description: 'How long to wait for lint to complete before failing'
    required: false
    default: '3m'
# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
#     - run: echo Hello ${{ inputs.who-to-greet }}.
#       shell: bash
#     - id: random-number-generator
#       run: echo "random-number=$(echo $RANDOM)" >> $GITHUB_OUTPUT
#       shell: bash
#     - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
#       shell: bash
#     - run: goodbye.sh
#       shell: bash
      
    - run: go get ./...
      shell: bash

    - run: go vet ./...
      shell: bash

    - run: go test ./...
      shell: bash

#     - name: Go build
#       run: go build ./...

    - name: Go lint
      uses: golangci/golangci-lint-action@v3
      with:
        # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
        version: latest

        args: --timeout=${{ inputs.lint-timeout }} --print-issued-lines=true

        # Optional: working directory, useful for monorepos
        # working-directory: somedir

        # Optional: golangci-lint command line arguments.
        # args: --issues-exit-code=0

        # Optional: show only new issues if it's a pull request. The default value is `false`.
        # only-new-issues: true

        # Optional: if set to true then the all caching functionality will be complete disabled,
        #           takes precedence over all other caching options.
        # skip-cache: true

        # Optional: if set to true then the action don't cache or restore ~/go/pkg.
        skip-pkg-cache: true

        # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
        # skip-build-cache: true
